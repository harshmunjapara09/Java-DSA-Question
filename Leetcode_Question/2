/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        ListNode sum = null;
        int carry = 0;

        while (temp1 != null || temp2 != null || carry > 0){
            int newCarry = carry;
            if(temp1 != null){
                newCarry += temp1.val;
            }
            if(temp2 != null){
                newCarry += temp2.val;
            }
            carry = newCarry / 10;
            newCarry %= 10;
            ListNode node = new ListNode(newCarry);
            node.next = sum;
            sum = node;
            if(temp1 != null){
                temp1 = temp1.next;
            }
            if(temp2 != null){
                temp2 = temp2.next;
            }
        }
        sum = reverse(sum);
        return sum;
    }
    public ListNode reverse(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        ListNode next;

        while(curr!=null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}